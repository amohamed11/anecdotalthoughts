<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>project on Anas Mohamed</title><link>https://amohamed.io/tags/project/</link><description>Recent content in project on Anas Mohamed</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 18 May 2021 23:12:25 +0000</lastBuildDate><atom:link href="https://amohamed.io/tags/project/atom.xml" rel="self" type="application/rss+xml"/><item><title>Building a Lightweight Key-Value Database in Go</title><link>https://amohamed.io/building-a-lightweight-key-value-database-in-go/</link><pubDate>Tue, 18 May 2021 23:12:25 +0000</pubDate><guid>https://amohamed.io/building-a-lightweight-key-value-database-in-go/</guid><description>This will be more of a high-level technical overview of key-value database design using notes from my research while working on Kagi, a on-disk key-value store.
At the bottom are some fantastic resources for better understanding B+Trees and Key-Value store design, definitely check those out.
Why build Kagi? # About a year and a half ago, I decided to take Databases II. And as soon as the first assignment, a run-of-the-mill embedded SQL assignment, was released, I remember thinking &amp;ldquo;why can&amp;rsquo;t we just create a database instead&amp;rdquo;.</description></item></channel></rss>